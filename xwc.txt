package game;

import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JPanel;

public class snackWin extends JPanel implements ActionListener,KeyListener {
   JButton newGame,stopGame;
   int fenshu,speed;
   int rx;
   int ry;
   boolean start=false;
   Random random=new Random();
   ArrayList list=new ArrayList();
   
   public snackWin(){
	   newGame =new JButton("开始");
	   stopGame =new JButton("退出");
	   this.setLayout(new FlowLayout(FlowLayout.LEFT));
	   this.add(newGame);
	   this.add(stopGame);
	   
	   newGame.addActionListener(this);
	   stopGame.addKeyListener(this);
   }
   public void paintComponent(Graphics g){
	   super.paintComponent(g);
	   
	   g.drawRect(10, 40, 400, 300);
	   g.drawString("分数"+fenshu, 150, 20);
	   g.drawString("速度"+speed, 200, 20);
	   g.setColor(Color.BLUE);
	   if(start){
		   g.fillRect(10+rx*10,40+ry*10,10,10);
		   g.setColor(Color.RED);
		   for(int i=0;i<list.size();i++){
			   g.fillRect(10+((Component) list.get(i)).getX()*10,40+((Component) list.get(i)).getY()*10,10,10);
		   }
	   }
   }
   public void otherMove(){
	   snackAct tempAct=new snackAct();
	   for(int i=0;i<list.size();i++){
		   if(i==1){
			   ((snackAct) list.get(i)).setX(((Component) list.get(0)).getX());
			   ((snackAct) list.get(i)).setY(((Component) list.get(0)).getY());
		   } else if(i>1){
			   tempAct=(snackAct) list.get(i-1);
			   list.set(i-1,list.get(i));
			   list.set(i,tempAct);
		   }
	   }
   }
   public void eat(){
	   if(rx==((Component) list.get(0)).getX()&&ry==((Component) list.get(0)).getY()){
		   rx=random.nextInt(40);
		   ry=random.nextInt(30);
		   snackAct tempAct=new snackAct();
		   tempAct.setX(((Component) list.get(list.size()-1)).getX());
		   tempAct.setY(((Component) list.get(list.size()-1)).getY());
		   list.add(tempAct);
	   }
   }
	   @Override
	   public void actionPerformed(ActionEvent e){
		   if(e.getSource()==newGame){
			   start=true;
			   
			   rx=random.nextInt(40);
			   ry=random.nextInt(30);
			   snackAct tempAct=new snackAct(rx,ry);
			   list.add(tempAct);
			   this.requestFocus(true);
			   this.repaint();
			   
		   }
		   if(e.getSource()==stopGame){
			   System.exit(0);
		   }
	   }
	   public void move(int x,int y){
		   if(minYes(x,y)){
			   otherMove();
			   ((snackAct) list.get(0)).setX(((Component) list.get(0)).getX()+x);
			   ((snackAct) list.get(0)).setY(((Component) list.get(0)).getY()+y);
			   eat();
			   this.repaint();
		   }
	   }
	   public boolean minYes(int x,int y){
		   int nextX=((Component) list.get(0)).getX()+x;
		   int nextY=((Component) list.get(0)).getY()+y;
		   if(!manYes(nextX,nextY))
			   return false;
		   else
			   return true;
	   }
	   public boolean manYes(int x,int y){
		   if(x<0||x>=40||y>=30)
			   return false;
		   else
			   return true;
			   
	   }
	   public void keyPressed(KeyEvent e){
		   if(start){
			  switch(e.getKeyCode()){
			   case KeyEvent.VK_UP:
			   move(0,-1);
			   break;
			   case KeyEvent.VK_DOWN:
			   move(0,1);
			   break;
			   case KeyEvent.VK_LEFT:
			   move(-1,0);
			   break;
			   case KeyEvent.VK_RIGHT:
			   move(1,0);
			   break;
			   default:
			   break;
			   }
		   }
	   }
	   public void keyReleased(KeyEvent arg0){
		   
	   }
	   public void keyTyped(KeyEvent arg0){
		   
	   }
   }
    
